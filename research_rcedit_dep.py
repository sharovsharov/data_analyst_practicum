#!/usr/bin/env python
# coding: utf-8

# Во второй части проекта вы выполните шаги 3 и 4. Их вручную проверит ревьюер.
# Чтобы вам не пришлось писать код заново для шагов 1 и 2, мы добавили авторские решения в ячейки с кодом. 
# 
# 

# # Описание проекта
# Заказчик — кредитный отдел банка. Нужно разобраться, влияет ли семейное положение и количество детей клиента на факт погашения кредита в срок. Входные данные от банка — статистика о платёжеспособности клиентов.
# Результаты исследования будут учтены при построении модели кредитного скоринга — специальной системы, которая оценивает способность потенциального заёмщика вернуть кредит банку.

# ## Откройте таблицу и изучите общую информацию о данных

# **Задание 1. Импортируйте библиотеку pandas. Считайте данные из csv-файла в датафрейм и сохраните в переменную `data`. Путь к файлу:**
# 
# `/datasets/data.csv`

# In[1]:


import pandas as pd

try:
    data = pd.read_csv('/datasets/data.csv')
except:
    data = pd.read_csv('https://code.s3.yandex.net/datasets/data.csv')


# # Исследование надежности заемщиков
# 

# **Задание 2. Выведите первые 20 строчек датафрейма `data` на экран.**

# In[2]:


data.head(20)


# **Задание 3. Выведите основную информацию о датафрейме с помощью метода `info()`.**

# In[3]:


data.info()


# ## Предобработка данных

# ### Удаление пропусков

# **Задание 4. Выведите количество пропущенных значений для каждого столбца. Используйте комбинацию двух методов.**

# In[4]:


data.isna().sum()


# **Задание 5. В двух столбцах есть пропущенные значения. Один из них — `days_employed`. Пропуски в этом столбце вы обработаете на следующем этапе. Другой столбец с пропущенными значениями — `total_income` — хранит данные о доходах. На сумму дохода сильнее всего влияет тип занятости, поэтому заполнить пропуски в этом столбце нужно медианным значением по каждому типу из столбца `income_type`. Например, у человека с типом занятости `сотрудник` пропуск в столбце `total_income` должен быть заполнен медианным доходом среди всех записей с тем же типом.**

# In[5]:


for t in data['income_type'].unique():
    data.loc[(data['income_type'] == t) & (data['total_income'].isna()), 'total_income'] =     data.loc[(data['income_type'] == t), 'total_income'].median()


# ### Обработка аномальных значений

# **Задание 6. В данных могут встречаться артефакты (аномалии) — значения, которые не отражают действительность и появились по какой-то ошибке. таким артефактом будет отрицательное количество дней трудового стажа в столбце `days_employed`. Для реальных данных это нормально. Обработайте значения в этом столбце: замените все отрицательные значения положительными с помощью метода `abs()`.**

# In[6]:


data['days_employed'] = data['days_employed'].abs()


# **Задание 7. Для каждого типа занятости выведите медианное значение трудового стажа `days_employed` в днях.**

# In[7]:


data.groupby('income_type')['days_employed'].agg('median')


# У двух типов (безработные и пенсионеры) получатся аномально большие значения. Исправить такие значения сложно, поэтому оставьте их как есть. Тем более этот столбец не понадобится вам для исследования.

# **Задание 8. Выведите перечень уникальных значений столбца `children`.**

# In[8]:


data['children'].unique()


# **Задание 9. В столбце `children` есть два аномальных значения. Удалите строки, в которых встречаются такие аномальные значения из датафрейма `data`.**

# In[9]:


data = data[(data['children'] != -1) & (data['children'] != 20)]


# **Задание 10. Ещё раз выведите перечень уникальных значений столбца `children`, чтобы убедиться, что артефакты удалены.**

# In[10]:


data['children'].unique()


# ### Удаление пропусков (продолжение)

# **Задание 11. Заполните пропуски в столбце `days_employed` медианными значениями по каждого типа занятости `income_type`.**

# In[11]:


for t in data['income_type'].unique():
    data.loc[(data['income_type'] == t) & (data['days_employed'].isna()), 'days_employed'] =     data.loc[(data['income_type'] == t), 'days_employed'].median()


# **Задание 12. Убедитесь, что все пропуски заполнены. Проверьте себя и ещё раз выведите количество пропущенных значений для каждого столбца с помощью двух методов.**

# In[12]:


data.isna().sum()


# ### Изменение типов данных

# **Задание 13. Замените вещественный тип данных в столбце `total_income` на целочисленный с помощью метода `astype()`.**

# In[13]:


data['total_income'] = data['total_income'].astype(int)


# ### Обработка дубликатов

# **Задание 14. Обработайте неявные дубликаты в столбце `education`. В этом столбце есть одни и те же значения, но записанные по-разному: с использованием заглавных и строчных букв. Приведите их к нижнему регистру. Проверьте остальные столбцы.**

# In[14]:


data['education'] = data['education'].str.lower()


# **Задание 15. Выведите на экран количество строк-дубликатов в данных. Если такие строки присутствуют, удалите их.**

# In[15]:


data.duplicated().sum()


# In[16]:


data = data.drop_duplicates()


# ### Категоризация данных

# **Задание 16. На основании диапазонов, указанных ниже, создайте в датафрейме `data` столбец `total_income_category` с категориями:**
# 
# - 0–30000 — `'E'`;
# - 30001–50000 — `'D'`;
# - 50001–200000 — `'C'`;
# - 200001–1000000 — `'B'`;
# - 1000001 и выше — `'A'`.
# 
# 
# **Например, кредитополучателю с доходом 25000 нужно назначить категорию `'E'`, а клиенту, получающему 235000, — `'B'`. Используйте собственную функцию с именем `categorize_income()` и метод `apply()`.**

# In[17]:


def categorize_income(income):
    try:
        if 0 <= income <= 30000:
            return 'E'
        elif 30001 <= income <= 50000:
            return 'D'
        elif 50001 <= income <= 200000:
            return 'C'
        elif 200001 <= income <= 1000000:
            return 'B'
        elif income >= 1000001:
            return 'A'
    except:
        pass


# In[18]:


data['total_income_category'] = data['total_income'].apply(categorize_income)


# **Задание 17. Выведите на экран перечень уникальных целей взятия кредита из столбца `purpose`.**

# In[19]:


data['purpose'].unique()


# **Задание 18. Создайте функцию, которая на основании данных из столбца `purpose` сформирует новый столбец `purpose_category`, в который войдут следующие категории:**
# 
# - `'операции с автомобилем'`,
# - `'операции с недвижимостью'`,
# - `'проведение свадьбы'`,
# - `'получение образования'`.
# 
# **Например, если в столбце `purpose` находится подстрока `'на покупку автомобиля'`, то в столбце `purpose_category` должна появиться строка `'операции с автомобилем'`.**
# 
# **Используйте собственную функцию с именем `categorize_purpose()` и метод `apply()`. Изучите данные в столбце `purpose` и определите, какие подстроки помогут вам правильно определить категорию.**

# In[20]:


def categorize_purpose(row):
    try:
        if 'автом' in row:
            return 'операции с автомобилем'
        elif 'жил' in row or 'недвиж' in row:
            return 'операции с недвижимостью'
        elif 'свад' in row:
            return 'проведение свадьбы'
        elif 'образов' in row:
            return 'получение образования'
    except:
        return 'нет категории'


# In[21]:


data['purpose_category'] = data['purpose'].apply(categorize_purpose)


# ### Шаг 3. Исследуйте данные и ответьте на вопросы

# #### 3.1 Есть ли зависимость между количеством детей и возвратом кредита в срок?

# In[22]:


# Ваш код будет здесь. Вы можете создавать новые ячейки.
# Сгруппируем данные методами groupby() и agg()
# Сгруппируем данные столбца 'children' с помощью метода groupby()
# В метод agg() передадим словарь с ключом/столюцом 'debt' — имел ли задолженность по возврату кредитов
# И значением — функциями, которые будут к этим столбцам применены
# нам понадобится подсчет заемщиков с помощью функйции 'count' и среднее по столбцу — 'mean'
children_amount = data.groupby('children').agg({'debt': ['count', 'mean']})
children_amount.columns = ['Кол-во заемщиков', '% невозврата']
sort_children_amount = children_amount.sort_values(by='% невозврата')
sort_children_amount.style.format({'% невозврата': '{:.2%}'})


# **Вывод:** из предоставленных данных видно, что с *количеством детей* растет *% невозврата*. Отклонение среди заемщиков с тремя и пятью детьми скорее всего связано с недостаточным количеством данных.

# #### 3.2 Есть ли зависимость между семейным положением и возвратом кредита в срок?

# In[23]:


# Ваш код будет здесь. Вы можете создавать новые ячейки.
depend_family_status = data.groupby('family_status').agg({'debt': ['count', 'mean']})
depend_family_status.columns = ['Кол-во заемщиков', '% невозврата']
sort_depend_family_status = depend_family_status.sort_values(by='% невозврата')
sort_depend_family_status.style.format({'% невозврата': '{:.2%}'})


# **Вывод:** хорошо видна зависимогсть между ссемейным положением и возвратом кредита в срок. Люди которые не были в официальных отношениях возвращают кредиты в срок реже.

# #### 3.3 Есть ли зависимость между уровнем дохода и возвратом кредита в срок?

# In[24]:


# Ваш код будет здесь. Вы можете создавать новые ячейки.
depend_income_category = data.groupby('total_income_category').agg({'debt': ['count', 'mean']})
depend_income_category.columns = ['Кол-во заемщиков', '% невозврата']
sort_depend_income_category = depend_income_category.sort_values(by='% невозврата')
sort_depend_income_category.style.format({'% невозврата': '{:.2%}'})


# **Вывод:** Неудивительно, что наибольший % невозврата кредита у категории с самым низким уровнем дохода, однако обртаное утверждение неверно, категория с самым высоким доходом не имеет самый низкий % невозврата кредита. Однако смущает небольшое количество заемщиков в этих категориях, можем ли мы делать выводы на основании выборки из пары десятков человек. Рассматривая категории с большим количсевтвом заемщиков, зависимость между высоким уровнем дохода и низким % невозврата соблюдается только в категориях 'B' и 'C'.

# #### 3.4 Как разные цели кредита влияют на его возврат в срок?

# In[25]:


# Ваш код будет здесь. Вы можете создавать новые ячейки.
depend_purpose = data.groupby('purpose_category').agg({'debt': ['count', 'mean']})
depend_purpose.columns = ['Кол-во заемщиков', '% невозврата']
sort_depend_purpose = depend_purpose.sort_values(by='% невозврата')
sort_depend_purpose.style.format({'% невозврата': '{:.2%}'})


# **Вывод:** наименьший % невозврата имеют операции с недвижимостью, наибольший — операции с автомобилем, ненамного отстает категория целей связанная с образованием, а вот проведение свадем напротив стремится к наименьшему % невозврата. Все таки покупка недвижимости для многих взвешанный шаг. 

# #### 3.5 Приведите возможные причины появления пропусков в исходных данных.

# *Ответ:* В исходных данных не хватало данных в столбцах:
# **days_employed** — общий трудовой стаж в днях
# **total_income** — ежемесячный доход
# В обоих случаях это были количественные данные. Данные могли не сохраниться из-за технического сбоя, также, возможно, данные просто не были указаны изначально. Например указать общий трудовой стаж в днях задача не из легких. Возможно ответы на эти вопросы в анкете не были обязательными или не всегда были обязательными. 

# #### 3.6 Объясните, почему заполнить пропуски медианным значением — лучшее решение для количественных переменных.

# *Ответ:* в выборке могут присутствовать выдающиеся значения (1000 против 10), поэтому среднее значение может искажать реальность. На медиану такой разброс значений в данных не повлияет.

# ### Шаг 4: общий вывод.

# Напишите ваш общий вывод.
# 
# Вопрос заказчика был в том, что влияет ли семейное положение и количество детей клиента на факт погашения кредита в срок. Обработав данные предоставленные заказчиком, могу сказать, что количество детей и семейное положение влияет на факт погашения кредита в срок. Чем больше детей, тем выше вероятность просрочки кредита. Также те клиенты которые офциально не состояли в браке, с большей вероятностью будут иметь проблемы с выплатой кредита в срок.
